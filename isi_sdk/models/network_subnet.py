# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NetworkSubnet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NetworkSubnet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'addr_family': 'str',
            'base_addr': 'str',
            'description': 'str',
            'dsr_addrs': 'list[str]',
            'gateway': 'str',
            'gateway_priority': 'int',
            'groupnet': 'str',
            'id': 'str',
            'mtu': 'int',
            'name': 'str',
            'pools': 'list[str]',
            'prefixlen': 'int',
            'sc_service_addr': 'str',
            'vlan_enabled': 'bool',
            'vlan_id': 'int'
        }

        self.attribute_map = {
            'addr_family': 'addr_family',
            'base_addr': 'base_addr',
            'description': 'description',
            'dsr_addrs': 'dsr_addrs',
            'gateway': 'gateway',
            'gateway_priority': 'gateway_priority',
            'groupnet': 'groupnet',
            'id': 'id',
            'mtu': 'mtu',
            'name': 'name',
            'pools': 'pools',
            'prefixlen': 'prefixlen',
            'sc_service_addr': 'sc_service_addr',
            'vlan_enabled': 'vlan_enabled',
            'vlan_id': 'vlan_id'
        }

        self._addr_family = None
        self._base_addr = None
        self._description = None
        self._dsr_addrs = None
        self._gateway = None
        self._gateway_priority = None
        self._groupnet = None
        self._id = None
        self._mtu = None
        self._name = None
        self._pools = None
        self._prefixlen = None
        self._sc_service_addr = None
        self._vlan_enabled = None
        self._vlan_id = None

    @property
    def addr_family(self):
        """
        Gets the addr_family of this NetworkSubnet.
        IP address format.

        :return: The addr_family of this NetworkSubnet.
        :rtype: str
        """
        return self._addr_family

    @addr_family.setter
    def addr_family(self, addr_family):
        """
        Sets the addr_family of this NetworkSubnet.
        IP address format.

        :param addr_family: The addr_family of this NetworkSubnet.
        :type: str
        """
        allowed_values = ["ipv4", "ipv6"]
        if addr_family not in allowed_values:
            raise ValueError(
                "Invalid value for `addr_family`, must be one of {0}"
                .format(allowed_values)
            )

        self._addr_family = addr_family

    @property
    def base_addr(self):
        """
        Gets the base_addr of this NetworkSubnet.
        The base IP address.

        :return: The base_addr of this NetworkSubnet.
        :rtype: str
        """
        return self._base_addr

    @base_addr.setter
    def base_addr(self, base_addr):
        """
        Sets the base_addr of this NetworkSubnet.
        The base IP address.

        :param base_addr: The base_addr of this NetworkSubnet.
        :type: str
        """
        
        self._base_addr = base_addr

    @property
    def description(self):
        """
        Gets the description of this NetworkSubnet.
        A description of the subnet.

        :return: The description of this NetworkSubnet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this NetworkSubnet.
        A description of the subnet.

        :param description: The description of this NetworkSubnet.
        :type: str
        """
        
        if not description:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if len(description) > 128: 
            raise ValueError("Invalid value for `description`, length must be less than `128`")

        self._description = description

    @property
    def dsr_addrs(self):
        """
        Gets the dsr_addrs of this NetworkSubnet.
        List of Direct Server Return addresses.

        :return: The dsr_addrs of this NetworkSubnet.
        :rtype: list[str]
        """
        return self._dsr_addrs

    @dsr_addrs.setter
    def dsr_addrs(self, dsr_addrs):
        """
        Sets the dsr_addrs of this NetworkSubnet.
        List of Direct Server Return addresses.

        :param dsr_addrs: The dsr_addrs of this NetworkSubnet.
        :type: list[str]
        """
        
        self._dsr_addrs = dsr_addrs

    @property
    def gateway(self):
        """
        Gets the gateway of this NetworkSubnet.
        Gateway IP address.

        :return: The gateway of this NetworkSubnet.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this NetworkSubnet.
        Gateway IP address.

        :param gateway: The gateway of this NetworkSubnet.
        :type: str
        """
        
        self._gateway = gateway

    @property
    def gateway_priority(self):
        """
        Gets the gateway_priority of this NetworkSubnet.
        Gateway priority.

        :return: The gateway_priority of this NetworkSubnet.
        :rtype: int
        """
        return self._gateway_priority

    @gateway_priority.setter
    def gateway_priority(self, gateway_priority):
        """
        Sets the gateway_priority of this NetworkSubnet.
        Gateway priority.

        :param gateway_priority: The gateway_priority of this NetworkSubnet.
        :type: int
        """
        
        if not gateway_priority:
            raise ValueError("Invalid value for `gateway_priority`, must not be `None`")
        if gateway_priority > 2.147483647E9: 
            raise ValueError("Invalid value for `gateway_priority`, must be a value less than or equal to `2.147483647E9`")
        if gateway_priority < 1.0: 
            raise ValueError("Invalid value for `gateway_priority`, must be a value greater than or equal to `1.0`")

        self._gateway_priority = gateway_priority

    @property
    def groupnet(self):
        """
        Gets the groupnet of this NetworkSubnet.
        Name of the groupnet this subnet belongs to.

        :return: The groupnet of this NetworkSubnet.
        :rtype: str
        """
        return self._groupnet

    @groupnet.setter
    def groupnet(self, groupnet):
        """
        Sets the groupnet of this NetworkSubnet.
        Name of the groupnet this subnet belongs to.

        :param groupnet: The groupnet of this NetworkSubnet.
        :type: str
        """
        
        self._groupnet = groupnet

    @property
    def id(self):
        """
        Gets the id of this NetworkSubnet.
        Unique Subnet ID.

        :return: The id of this NetworkSubnet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NetworkSubnet.
        Unique Subnet ID.

        :param id: The id of this NetworkSubnet.
        :type: str
        """
        
        self._id = id

    @property
    def mtu(self):
        """
        Gets the mtu of this NetworkSubnet.
        MTU of the subnet.

        :return: The mtu of this NetworkSubnet.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """
        Sets the mtu of this NetworkSubnet.
        MTU of the subnet.

        :param mtu: The mtu of this NetworkSubnet.
        :type: int
        """
        
        if not mtu:
            raise ValueError("Invalid value for `mtu`, must not be `None`")
        if mtu > 9000.0: 
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9000.0`")
        if mtu < 576.0: 
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `576.0`")

        self._mtu = mtu

    @property
    def name(self):
        """
        Gets the name of this NetworkSubnet.
        The name of the subnet.

        :return: The name of this NetworkSubnet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NetworkSubnet.
        The name of the subnet.

        :param name: The name of this NetworkSubnet.
        :type: str
        """
        
        if not name:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) > 32: 
            raise ValueError("Invalid value for `name`, length must be less than `32`")

        self._name = name

    @property
    def pools(self):
        """
        Gets the pools of this NetworkSubnet.
        Name of the pools in the subnet.

        :return: The pools of this NetworkSubnet.
        :rtype: list[str]
        """
        return self._pools

    @pools.setter
    def pools(self, pools):
        """
        Sets the pools of this NetworkSubnet.
        Name of the pools in the subnet.

        :param pools: The pools of this NetworkSubnet.
        :type: list[str]
        """
        
        self._pools = pools

    @property
    def prefixlen(self):
        """
        Gets the prefixlen of this NetworkSubnet.
        Subnet Prefix Length.

        :return: The prefixlen of this NetworkSubnet.
        :rtype: int
        """
        return self._prefixlen

    @prefixlen.setter
    def prefixlen(self, prefixlen):
        """
        Sets the prefixlen of this NetworkSubnet.
        Subnet Prefix Length.

        :param prefixlen: The prefixlen of this NetworkSubnet.
        :type: int
        """
        
        if not prefixlen:
            raise ValueError("Invalid value for `prefixlen`, must not be `None`")
        if prefixlen > 128.0: 
            raise ValueError("Invalid value for `prefixlen`, must be a value less than or equal to `128.0`")
        if prefixlen < 1.0: 
            raise ValueError("Invalid value for `prefixlen`, must be a value greater than or equal to `1.0`")

        self._prefixlen = prefixlen

    @property
    def sc_service_addr(self):
        """
        Gets the sc_service_addr of this NetworkSubnet.
        The address that SmartConnect listens for DNS requests.

        :return: The sc_service_addr of this NetworkSubnet.
        :rtype: str
        """
        return self._sc_service_addr

    @sc_service_addr.setter
    def sc_service_addr(self, sc_service_addr):
        """
        Sets the sc_service_addr of this NetworkSubnet.
        The address that SmartConnect listens for DNS requests.

        :param sc_service_addr: The sc_service_addr of this NetworkSubnet.
        :type: str
        """
        
        self._sc_service_addr = sc_service_addr

    @property
    def vlan_enabled(self):
        """
        Gets the vlan_enabled of this NetworkSubnet.
        VLAN tagging enabled or disabled.

        :return: The vlan_enabled of this NetworkSubnet.
        :rtype: bool
        """
        return self._vlan_enabled

    @vlan_enabled.setter
    def vlan_enabled(self, vlan_enabled):
        """
        Sets the vlan_enabled of this NetworkSubnet.
        VLAN tagging enabled or disabled.

        :param vlan_enabled: The vlan_enabled of this NetworkSubnet.
        :type: bool
        """
        
        self._vlan_enabled = vlan_enabled

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this NetworkSubnet.
        VLAN ID for all interfaces in the subnet.

        :return: The vlan_id of this NetworkSubnet.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this NetworkSubnet.
        VLAN ID for all interfaces in the subnet.

        :param vlan_id: The vlan_id of this NetworkSubnet.
        :type: int
        """
        
        if not vlan_id:
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")
        if vlan_id > 4094.0: 
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094.0`")
        if vlan_id < 2.0: 
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `2.0`")

        self._vlan_id = vlan_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

