# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NodesLnnStateServicelightExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NodesLnnStateServicelightExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'valid': 'bool',
            'total': 'int',
            'nodes': 'list[NodesLnnStateServicelightNode]',
            'present': 'bool',
            'enabled': 'bool',
            'supported': 'bool'
        }

        self.attribute_map = {
            'valid': 'valid',
            'total': 'total',
            'nodes': 'nodes',
            'present': 'present',
            'enabled': 'enabled',
            'supported': 'supported'
        }

        self._valid = None
        self._total = None
        self._nodes = None
        self._present = None
        self._enabled = None
        self._supported = None

    @property
    def valid(self):
        """
        Gets the valid of this NodesLnnStateServicelightExtended.
        The node service light state is valid (False = Error).

        :return: The valid of this NodesLnnStateServicelightExtended.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """
        Sets the valid of this NodesLnnStateServicelightExtended.
        The node service light state is valid (False = Error).

        :param valid: The valid of this NodesLnnStateServicelightExtended.
        :type: bool
        """
        self._valid = valid

    @property
    def total(self):
        """
        Gets the total of this NodesLnnStateServicelightExtended.
        Total number of items available.

        :return: The total of this NodesLnnStateServicelightExtended.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this NodesLnnStateServicelightExtended.
        Total number of items available.

        :param total: The total of this NodesLnnStateServicelightExtended.
        :type: int
        """
        self._total = total

    @property
    def nodes(self):
        """
        Gets the nodes of this NodesLnnStateServicelightExtended.


        :return: The nodes of this NodesLnnStateServicelightExtended.
        :rtype: list[NodesLnnStateServicelightNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this NodesLnnStateServicelightExtended.


        :param nodes: The nodes of this NodesLnnStateServicelightExtended.
        :type: list[NodesLnnStateServicelightNode]
        """
        self._nodes = nodes

    @property
    def present(self):
        """
        Gets the present of this NodesLnnStateServicelightExtended.
        This node has a service light.

        :return: The present of this NodesLnnStateServicelightExtended.
        :rtype: bool
        """
        return self._present

    @present.setter
    def present(self, present):
        """
        Sets the present of this NodesLnnStateServicelightExtended.
        This node has a service light.

        :param present: The present of this NodesLnnStateServicelightExtended.
        :type: bool
        """
        self._present = present

    @property
    def enabled(self):
        """
        Gets the enabled of this NodesLnnStateServicelightExtended.
        The node service light state (True = on).

        :return: The enabled of this NodesLnnStateServicelightExtended.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this NodesLnnStateServicelightExtended.
        The node service light state (True = on).

        :param enabled: The enabled of this NodesLnnStateServicelightExtended.
        :type: bool
        """
        self._enabled = enabled

    @property
    def supported(self):
        """
        Gets the supported of this NodesLnnStateServicelightExtended.
        This node supports a service light.

        :return: The supported of this NodesLnnStateServicelightExtended.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """
        Sets the supported of this NodesLnnStateServicelightExtended.
        This node supports a service light.

        :param supported: The supported of this NodesLnnStateServicelightExtended.
        :type: bool
        """
        self._supported = supported

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

