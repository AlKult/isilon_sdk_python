# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class JobRecentRecentItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobRecentRecentItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'control_state': 'str',
            'create_time': 'int',
            'current_phase': 'int',
            'description': 'str',
            'end_time': 'int',
            'id': 'int',
            'impact': 'str',
            'participants': 'list[int]',
            'paths': 'list[str]',
            'policy': 'str',
            'priority': 'int',
            'progress': 'str',
            'retries_remaining': 'int',
            'running_time': 'int',
            'start_time': 'int',
            'state': 'str',
            'total_phases': 'int',
            'type': 'str',
            'waiting_on': 'int',
            'waiting_reason': 'str'
        }

        self.attribute_map = {
            'control_state': 'control_state',
            'create_time': 'create_time',
            'current_phase': 'current_phase',
            'description': 'description',
            'end_time': 'end_time',
            'id': 'id',
            'impact': 'impact',
            'participants': 'participants',
            'paths': 'paths',
            'policy': 'policy',
            'priority': 'priority',
            'progress': 'progress',
            'retries_remaining': 'retries_remaining',
            'running_time': 'running_time',
            'start_time': 'start_time',
            'state': 'state',
            'total_phases': 'total_phases',
            'type': 'type',
            'waiting_on': 'waiting_on',
            'waiting_reason': 'waiting_reason'
        }

        self._control_state = None
        self._create_time = None
        self._current_phase = None
        self._description = None
        self._end_time = None
        self._id = None
        self._impact = None
        self._participants = None
        self._paths = None
        self._policy = None
        self._priority = None
        self._progress = None
        self._retries_remaining = None
        self._running_time = None
        self._start_time = None
        self._state = None
        self._total_phases = None
        self._type = None
        self._waiting_on = None
        self._waiting_reason = None

    @property
    def control_state(self):
        """
        Gets the control_state of this JobRecentRecentItem.
        State to which the job is transitioning; if control_state is identical to state, the job's state is stable.

        :return: The control_state of this JobRecentRecentItem.
        :rtype: str
        """
        return self._control_state

    @control_state.setter
    def control_state(self, control_state):
        """
        Sets the control_state of this JobRecentRecentItem.
        State to which the job is transitioning; if control_state is identical to state, the job's state is stable.

        :param control_state: The control_state of this JobRecentRecentItem.
        :type: str
        """
        allowed_values = ["running", "paused_user", "paused_system", "paused_policy", "paused_priority", "cancelled_user", "cancelled_system", "failed", "succeeded", "unknown"]
        if control_state not in allowed_values:
            raise ValueError(
                "Invalid value for `control_state`, must be one of {0}"
                .format(allowed_values)
            )
        self._control_state = control_state

    @property
    def create_time(self):
        """
        Gets the create_time of this JobRecentRecentItem.
        The time the job was queued, in seconds since the epoch.

        :return: The create_time of this JobRecentRecentItem.
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this JobRecentRecentItem.
        The time the job was queued, in seconds since the epoch.

        :param create_time: The create_time of this JobRecentRecentItem.
        :type: int
        """
        self._create_time = create_time

    @property
    def current_phase(self):
        """
        Gets the current_phase of this JobRecentRecentItem.
        The current phase of the job.

        :return: The current_phase of this JobRecentRecentItem.
        :rtype: int
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """
        Sets the current_phase of this JobRecentRecentItem.
        The current phase of the job.

        :param current_phase: The current_phase of this JobRecentRecentItem.
        :type: int
        """
        self._current_phase = current_phase

    @property
    def description(self):
        """
        Gets the description of this JobRecentRecentItem.
        A text representation of the job.

        :return: The description of this JobRecentRecentItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this JobRecentRecentItem.
        A text representation of the job.

        :param description: The description of this JobRecentRecentItem.
        :type: str
        """
        self._description = description

    @property
    def end_time(self):
        """
        Gets the end_time of this JobRecentRecentItem.
        The time the job ended, in seconds since the Epoch.

        :return: The end_time of this JobRecentRecentItem.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this JobRecentRecentItem.
        The time the job ended, in seconds since the Epoch.

        :param end_time: The end_time of this JobRecentRecentItem.
        :type: int
        """
        self._end_time = end_time

    @property
    def id(self):
        """
        Gets the id of this JobRecentRecentItem.
        The ID of the job.

        :return: The id of this JobRecentRecentItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobRecentRecentItem.
        The ID of the job.

        :param id: The id of this JobRecentRecentItem.
        :type: int
        """
        self._id = id

    @property
    def impact(self):
        """
        Gets the impact of this JobRecentRecentItem.
        The current impact of the job.

        :return: The impact of this JobRecentRecentItem.
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """
        Sets the impact of this JobRecentRecentItem.
        The current impact of the job.

        :param impact: The impact of this JobRecentRecentItem.
        :type: str
        """
        allowed_values = ["Low", "Medium", "High", "Paused"]
        if impact not in allowed_values:
            raise ValueError(
                "Invalid value for `impact`, must be one of {0}"
                .format(allowed_values)
            )
        self._impact = impact

    @property
    def participants(self):
        """
        Gets the participants of this JobRecentRecentItem.
        The set of devids working on the job.

        :return: The participants of this JobRecentRecentItem.
        :rtype: list[int]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """
        Sets the participants of this JobRecentRecentItem.
        The set of devids working on the job.

        :param participants: The participants of this JobRecentRecentItem.
        :type: list[int]
        """
        self._participants = participants

    @property
    def paths(self):
        """
        Gets the paths of this JobRecentRecentItem.
        Paths for which the job was queued.

        :return: The paths of this JobRecentRecentItem.
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """
        Sets the paths of this JobRecentRecentItem.
        Paths for which the job was queued.

        :param paths: The paths of this JobRecentRecentItem.
        :type: list[str]
        """
        self._paths = paths

    @property
    def policy(self):
        """
        Gets the policy of this JobRecentRecentItem.
        Current impact policy of the job.

        :return: The policy of this JobRecentRecentItem.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """
        Sets the policy of this JobRecentRecentItem.
        Current impact policy of the job.

        :param policy: The policy of this JobRecentRecentItem.
        :type: str
        """
        self._policy = policy

    @property
    def priority(self):
        """
        Gets the priority of this JobRecentRecentItem.
        Current priority of the job; lower numbers preempt higher numbers.

        :return: The priority of this JobRecentRecentItem.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this JobRecentRecentItem.
        Current priority of the job; lower numbers preempt higher numbers.

        :param priority: The priority of this JobRecentRecentItem.
        :type: int
        """
        self._priority = priority

    @property
    def progress(self):
        """
        Gets the progress of this JobRecentRecentItem.
        A text representation of the job's progress.

        :return: The progress of this JobRecentRecentItem.
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this JobRecentRecentItem.
        A text representation of the job's progress.

        :param progress: The progress of this JobRecentRecentItem.
        :type: str
        """
        self._progress = progress

    @property
    def retries_remaining(self):
        """
        Gets the retries_remaining of this JobRecentRecentItem.
        The number of retries remaining if the job fails.

        :return: The retries_remaining of this JobRecentRecentItem.
        :rtype: int
        """
        return self._retries_remaining

    @retries_remaining.setter
    def retries_remaining(self, retries_remaining):
        """
        Sets the retries_remaining of this JobRecentRecentItem.
        The number of retries remaining if the job fails.

        :param retries_remaining: The retries_remaining of this JobRecentRecentItem.
        :type: int
        """
        self._retries_remaining = retries_remaining

    @property
    def running_time(self):
        """
        Gets the running_time of this JobRecentRecentItem.
        The number of seconds the job has executed.

        :return: The running_time of this JobRecentRecentItem.
        :rtype: int
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """
        Sets the running_time of this JobRecentRecentItem.
        The number of seconds the job has executed.

        :param running_time: The running_time of this JobRecentRecentItem.
        :type: int
        """
        self._running_time = running_time

    @property
    def start_time(self):
        """
        Gets the start_time of this JobRecentRecentItem.
        The time the job started, in seconds since the Epoch.

        :return: The start_time of this JobRecentRecentItem.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this JobRecentRecentItem.
        The time the job started, in seconds since the Epoch.

        :param start_time: The start_time of this JobRecentRecentItem.
        :type: int
        """
        self._start_time = start_time

    @property
    def state(self):
        """
        Gets the state of this JobRecentRecentItem.
        Current state of the job.

        :return: The state of this JobRecentRecentItem.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this JobRecentRecentItem.
        Current state of the job.

        :param state: The state of this JobRecentRecentItem.
        :type: str
        """
        allowed_values = ["running", "paused_user", "paused_system", "paused_policy", "paused_priority", "cancelled_user", "cancelled_system", "failed", "succeeded", "unknown"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )
        self._state = state

    @property
    def total_phases(self):
        """
        Gets the total_phases of this JobRecentRecentItem.
        The total number of phases of the job type.

        :return: The total_phases of this JobRecentRecentItem.
        :rtype: int
        """
        return self._total_phases

    @total_phases.setter
    def total_phases(self, total_phases):
        """
        Sets the total_phases of this JobRecentRecentItem.
        The total number of phases of the job type.

        :param total_phases: The total_phases of this JobRecentRecentItem.
        :type: int
        """
        self._total_phases = total_phases

    @property
    def type(self):
        """
        Gets the type of this JobRecentRecentItem.
        The job type.

        :return: The type of this JobRecentRecentItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this JobRecentRecentItem.
        The job type.

        :param type: The type of this JobRecentRecentItem.
        :type: str
        """
        self._type = type

    @property
    def waiting_on(self):
        """
        Gets the waiting_on of this JobRecentRecentItem.
        The ID of a job for which this job is waiting.

        :return: The waiting_on of this JobRecentRecentItem.
        :rtype: int
        """
        return self._waiting_on

    @waiting_on.setter
    def waiting_on(self, waiting_on):
        """
        Sets the waiting_on of this JobRecentRecentItem.
        The ID of a job for which this job is waiting.

        :param waiting_on: The waiting_on of this JobRecentRecentItem.
        :type: int
        """
        self._waiting_on = waiting_on

    @property
    def waiting_reason(self):
        """
        Gets the waiting_reason of this JobRecentRecentItem.
        The reason the job is waiting.

        :return: The waiting_reason of this JobRecentRecentItem.
        :rtype: str
        """
        return self._waiting_reason

    @waiting_reason.setter
    def waiting_reason(self, waiting_reason):
        """
        Sets the waiting_reason of this JobRecentRecentItem.
        The reason the job is waiting.

        :param waiting_reason: The waiting_reason of this JobRecentRecentItem.
        :type: str
        """
        allowed_values = ["blocked_by_priority"]
        if waiting_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `waiting_reason`, must be one of {0}"
                .format(allowed_values)
            )
        self._waiting_reason = waiting_reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

