# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'ip_addrs': 'list[str]',
            'lnn': 'int',
            'name': 'str',
            'nic_name': 'str',
            'owners': 'list[GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItemOwner]',
            'status': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'ip_addrs': 'ip_addrs',
            'lnn': 'lnn',
            'name': 'name',
            'nic_name': 'nic_name',
            'owners': 'owners',
            'status': 'status',
            'type': 'type'
        }

        self._id = None
        self._ip_addrs = None
        self._lnn = None
        self._name = None
        self._nic_name = None
        self._owners = None
        self._status = None
        self._type = None

    @property
    def id(self):
        """
        Gets the id of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Unique interface ID.

        :return: The id of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Unique interface ID.

        :param id: The id of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: str
        """
        self._id = id

    @property
    def ip_addrs(self):
        """
        Gets the ip_addrs of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        List of IP addresses

        :return: The ip_addrs of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: list[str]
        """
        return self._ip_addrs

    @ip_addrs.setter
    def ip_addrs(self, ip_addrs):
        """
        Sets the ip_addrs of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        List of IP addresses

        :param ip_addrs: The ip_addrs of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: list[str]
        """
        self._ip_addrs = ip_addrs

    @property
    def lnn(self):
        """
        Gets the lnn of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Logical Node Number

        :return: The lnn of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """
        Sets the lnn of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Logical Node Number

        :param lnn: The lnn of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: int
        """
        self._lnn = lnn

    @property
    def name(self):
        """
        Gets the name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        The name of the interface.

        :return: The name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        The name of the interface.

        :param name: The name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: str
        """
        self._name = name

    @property
    def nic_name(self):
        """
        Gets the nic_name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        NIC name

        :return: The nic_name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: str
        """
        return self._nic_name

    @nic_name.setter
    def nic_name(self, nic_name):
        """
        Sets the nic_name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        NIC name

        :param nic_name: The nic_name of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: str
        """
        self._nic_name = nic_name

    @property
    def owners(self):
        """
        Gets the owners of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        List of owners (membership)

        :return: The owners of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: list[GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItemOwner]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        List of owners (membership)

        :param owners: The owners of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: list[GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItemOwner]
        """
        self._owners = owners

    @property
    def status(self):
        """
        Gets the status of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Status of the interface

        :return: The status of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Status of the interface

        :param status: The status of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: str
        """
        allowed_values = ["up", "no_carrier", "active", "inactive"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def type(self):
        """
        Gets the type of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Interface type.  The '*gige' types stand for 'gigabit ethernet'.  'gige' itself is occasionally also referred to in other places as 'ext' for 'external'.  'ib' and 'ib_qdr' are internal Infiniband interface types.  'vlan' and 'vmxnet3' are virtual interface types that appear on virtual nodes.  'loopback' is an interface for failover addresses and should only appear if failover is configured.

        :return: The type of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        Interface type.  The '*gige' types stand for 'gigabit ethernet'.  'gige' itself is occasionally also referred to in other places as 'ext' for 'external'.  'ib' and 'ib_qdr' are internal Infiniband interface types.  'vlan' and 'vmxnet3' are virtual interface types that appear on virtual nodes.  'loopback' is an interface for failover addresses and should only appear if failover is configured.

        :param type: The type of this GroupnetsGroupnetSubnetsSubnetPoolsPoolInterfacesInterfaceItem.
        :type: str
        """
        allowed_values = ["any", "gige", "fastgige", "10gige", "40gige", "ib", "ib_qdr", "aggregated", "vlan", "vmxnet3", "loopback"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

