# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CreateSnapshotSnapshotResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateSnapshotSnapshotResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'created': 'int',
            'expires': 'int',
            'has_locks': 'bool',
            'id': 'int',
            'name': 'str',
            'path': 'str',
            'pct_filesystem': 'float',
            'pct_reserve': 'float',
            'schedule': 'str',
            'shadow_bytes': 'int',
            'size': 'int',
            'state': 'str',
            'target_id': 'int',
            'target_name': 'str'
        }

        self.attribute_map = {
            'alias': 'alias',
            'created': 'created',
            'expires': 'expires',
            'has_locks': 'has_locks',
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'pct_filesystem': 'pct_filesystem',
            'pct_reserve': 'pct_reserve',
            'schedule': 'schedule',
            'shadow_bytes': 'shadow_bytes',
            'size': 'size',
            'state': 'state',
            'target_id': 'target_id',
            'target_name': 'target_name'
        }

        self._alias = None
        self._created = None
        self._expires = None
        self._has_locks = None
        self._id = None
        self._name = None
        self._path = None
        self._pct_filesystem = None
        self._pct_reserve = None
        self._schedule = None
        self._shadow_bytes = None
        self._size = None
        self._state = None
        self._target_id = None
        self._target_name = None

    @property
    def alias(self):
        """
        Gets the alias of this CreateSnapshotSnapshotResponse.
        Alias name to create for this snapshot. If null, remove any alias.

        :return: The alias of this CreateSnapshotSnapshotResponse.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this CreateSnapshotSnapshotResponse.
        Alias name to create for this snapshot. If null, remove any alias.

        :param alias: The alias of this CreateSnapshotSnapshotResponse.
        :type: str
        """
        self._alias = alias

    @property
    def created(self):
        """
        Gets the created of this CreateSnapshotSnapshotResponse.
        The Unix Epoch time the snapshot was created.

        :return: The created of this CreateSnapshotSnapshotResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CreateSnapshotSnapshotResponse.
        The Unix Epoch time the snapshot was created.

        :param created: The created of this CreateSnapshotSnapshotResponse.
        :type: int
        """
        self._created = created

    @property
    def expires(self):
        """
        Gets the expires of this CreateSnapshotSnapshotResponse.
        The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.

        :return: The expires of this CreateSnapshotSnapshotResponse.
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """
        Sets the expires of this CreateSnapshotSnapshotResponse.
        The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.

        :param expires: The expires of this CreateSnapshotSnapshotResponse.
        :type: int
        """
        self._expires = expires

    @property
    def has_locks(self):
        """
        Gets the has_locks of this CreateSnapshotSnapshotResponse.
        True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.

        :return: The has_locks of this CreateSnapshotSnapshotResponse.
        :rtype: bool
        """
        return self._has_locks

    @has_locks.setter
    def has_locks(self, has_locks):
        """
        Sets the has_locks of this CreateSnapshotSnapshotResponse.
        True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.

        :param has_locks: The has_locks of this CreateSnapshotSnapshotResponse.
        :type: bool
        """
        self._has_locks = has_locks

    @property
    def id(self):
        """
        Gets the id of this CreateSnapshotSnapshotResponse.
        The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.

        :return: The id of this CreateSnapshotSnapshotResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CreateSnapshotSnapshotResponse.
        The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.

        :param id: The id of this CreateSnapshotSnapshotResponse.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CreateSnapshotSnapshotResponse.
        The user or system supplied snapshot name. This will be null for snapshots pending delete.

        :return: The name of this CreateSnapshotSnapshotResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateSnapshotSnapshotResponse.
        The user or system supplied snapshot name. This will be null for snapshots pending delete.

        :param name: The name of this CreateSnapshotSnapshotResponse.
        :type: str
        """
        self._name = name

    @property
    def path(self):
        """
        Gets the path of this CreateSnapshotSnapshotResponse.
        The /ifs path snapshotted.

        :return: The path of this CreateSnapshotSnapshotResponse.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this CreateSnapshotSnapshotResponse.
        The /ifs path snapshotted.

        :param path: The path of this CreateSnapshotSnapshotResponse.
        :type: str
        """
        self._path = path

    @property
    def pct_filesystem(self):
        """
        Gets the pct_filesystem of this CreateSnapshotSnapshotResponse.
        Percentage of /ifs used for storing this snapshot.

        :return: The pct_filesystem of this CreateSnapshotSnapshotResponse.
        :rtype: float
        """
        return self._pct_filesystem

    @pct_filesystem.setter
    def pct_filesystem(self, pct_filesystem):
        """
        Sets the pct_filesystem of this CreateSnapshotSnapshotResponse.
        Percentage of /ifs used for storing this snapshot.

        :param pct_filesystem: The pct_filesystem of this CreateSnapshotSnapshotResponse.
        :type: float
        """
        self._pct_filesystem = pct_filesystem

    @property
    def pct_reserve(self):
        """
        Gets the pct_reserve of this CreateSnapshotSnapshotResponse.
        Percentage of configured snapshot reserved used for storing this snapshot.

        :return: The pct_reserve of this CreateSnapshotSnapshotResponse.
        :rtype: float
        """
        return self._pct_reserve

    @pct_reserve.setter
    def pct_reserve(self, pct_reserve):
        """
        Sets the pct_reserve of this CreateSnapshotSnapshotResponse.
        Percentage of configured snapshot reserved used for storing this snapshot.

        :param pct_reserve: The pct_reserve of this CreateSnapshotSnapshotResponse.
        :type: float
        """
        self._pct_reserve = pct_reserve

    @property
    def schedule(self):
        """
        Gets the schedule of this CreateSnapshotSnapshotResponse.
        The name of the schedule used to create this snapshot, if applicable.

        :return: The schedule of this CreateSnapshotSnapshotResponse.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this CreateSnapshotSnapshotResponse.
        The name of the schedule used to create this snapshot, if applicable.

        :param schedule: The schedule of this CreateSnapshotSnapshotResponse.
        :type: str
        """
        self._schedule = schedule

    @property
    def shadow_bytes(self):
        """
        Gets the shadow_bytes of this CreateSnapshotSnapshotResponse.
        The amount of shadow bytes referred to by this snapshot.

        :return: The shadow_bytes of this CreateSnapshotSnapshotResponse.
        :rtype: int
        """
        return self._shadow_bytes

    @shadow_bytes.setter
    def shadow_bytes(self, shadow_bytes):
        """
        Sets the shadow_bytes of this CreateSnapshotSnapshotResponse.
        The amount of shadow bytes referred to by this snapshot.

        :param shadow_bytes: The shadow_bytes of this CreateSnapshotSnapshotResponse.
        :type: int
        """
        self._shadow_bytes = shadow_bytes

    @property
    def size(self):
        """
        Gets the size of this CreateSnapshotSnapshotResponse.
        The amount of storage in bytes used to store this snapshot.

        :return: The size of this CreateSnapshotSnapshotResponse.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this CreateSnapshotSnapshotResponse.
        The amount of storage in bytes used to store this snapshot.

        :param size: The size of this CreateSnapshotSnapshotResponse.
        :type: int
        """
        self._size = size

    @property
    def state(self):
        """
        Gets the state of this CreateSnapshotSnapshotResponse.
        Snapshot state.

        :return: The state of this CreateSnapshotSnapshotResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CreateSnapshotSnapshotResponse.
        Snapshot state.

        :param state: The state of this CreateSnapshotSnapshotResponse.
        :type: str
        """
        allowed_values = ["active", "deleting"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )
        self._state = state

    @property
    def target_id(self):
        """
        Gets the target_id of this CreateSnapshotSnapshotResponse.
        The ID of the snapshot pointed to if this is an alias.

        :return: The target_id of this CreateSnapshotSnapshotResponse.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """
        Sets the target_id of this CreateSnapshotSnapshotResponse.
        The ID of the snapshot pointed to if this is an alias.

        :param target_id: The target_id of this CreateSnapshotSnapshotResponse.
        :type: int
        """
        self._target_id = target_id

    @property
    def target_name(self):
        """
        Gets the target_name of this CreateSnapshotSnapshotResponse.
        The name of the snapshot pointed to if this is an alias.

        :return: The target_name of this CreateSnapshotSnapshotResponse.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """
        Sets the target_name of this CreateSnapshotSnapshotResponse.
        The name of the snapshot pointed to if this is an alias.

        :param target_name: The target_name of this CreateSnapshotSnapshotResponse.
        :type: str
        """
        self._target_name = target_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

